# 指示
あなたは経験豊富なソフトウェアアーキテクトです。以下の[前提条件]と[ソースコード]を読み、添付の[評価チェックリスト]の全項目に基づいて、プロフェッショナルな視点からコードレビューを実施してください。

レビューの際は、単に問題点を指摘するだけでなく、その問題がなぜ重要なのか（どの設計原則に違反しているかなど）、そしてどのように修正すれば改善できるのか、具体的なコード例を交えながら詳細に解説してください。

# 前提条件
- **プロジェクトの目的**: [例: 顧客情報を管理するWeb API]
- **プログラミング言語**: [例: C++]
- **フレームワーク/ライブラリ**: [例: なし、標準ライブラリのみ]
- **特に重視する設計品質**: [例: 保守性とテスト容易性]

# ソースコード
```cpp
[ここにレビューしてほしいC++のコードを貼り付ける]


# 評価チェックリスト

1. 保守性
- 可読性: 命名は適切か？一貫性はあるか？
- 構造: 凝集度は高いか？結合度は低いか？クラス/メソッド分割は妥当か？
- シンプルさ: KISS/YAGNI原則は守られているか？
- 重複: DRY原則は守られているか？

2. 拡張性と柔軟性
- SOLID原則: オープン・クローズド、リスコフの置換、インターフェース分離、依存性逆転の各原則は守られているか？

3. 堅牢性
- エラーハンドリング: エラー処理は網羅的かつ適切か？

4. テスト容易性
- テスト: 単体テストはしやすい構造か？依存は注入可能か？

5. パフォーマンス
- 効率: 非効率なアルゴリズムやリソースの無駄遣いはないか？

6. セキュリティ
- 安全性: 既知の脆弱性につながるような実装はないか？入力値の検証はされているか？

# 出力形式
- 最初に、コード全体の総合評価を簡潔にまとめてください。
- 次に、[評価チェックリスト]の項目ごとに、具体的な問題点、その理由、そして改善案（コード例を含む）を記述してください。
- 問題が見つからなかった項目については、「特に問題は見当たりませんでした。」と記述してください。